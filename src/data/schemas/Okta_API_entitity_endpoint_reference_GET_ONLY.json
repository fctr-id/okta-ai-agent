{
  "entity_summary": {
    "application": {
      "aliases": ["app", "integration", "client"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "application_assignment": {
      "aliases": ["app assignment", "user app assignment", "group app assignment"],
      "operations": ["list_group_assignments", "get_group_assignment", "list_user_assignments", "get_user_assignment"],
      "methods": ["GET"],
      "endpoint_count": 4
    },
    "application_connection": {
      "aliases": ["provisioning connection"],
      "operations": ["get_default", "get_jwks"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "application_credential": {
      "aliases": ["app credential", "key", "secret", "certificate", "csr", "jwk"],
      "operations": ["list_csrs", "get_csr", "list_keys", "get_key", "list_jwks", "get_jwk", "list_secrets", "get_secret"],
      "methods": ["GET"],
      "endpoint_count": 8
    },
    "application_feature": {
      "aliases": ["app feature", "provisioning feature"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "application_federated_claim": {
      "aliases": ["federated claim", "token claim"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "application_grant": {
      "aliases": ["app grant", "consent grant"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "application_sso": {
      "aliases": ["sso settings", "saml metadata"],
      "operations": ["get_saml_metadata"],
      "methods": ["GET"],
      "endpoint_count": 1
    },
    "application_token": {
      "aliases": ["app token", "refresh token"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "authenticator": {
      "aliases": ["mfa", "factor"],
      "operations": ["get_well_known_config", "list", "get", "list_methods", "get_method"],
      "methods": ["GET"],
      "endpoint_count": 5
    },
    "behavior_rule": {
      "aliases": ["behavior detection rule"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "custom_role": {
      "aliases": ["iam role"],
      "operations": ["list", "get", "list_permissions", "get_permission"],
      "methods": ["GET"],
      "endpoint_count": 4
    },
    "device": {
      "aliases": ["devices", "endpoint"],
      "operations": ["list", "get", "list_users"],
      "methods": ["GET"],
      "endpoint_count": 3
    },
    "device_assurance_policy": {
      "aliases": ["device trust policy"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "device_integration": {
      "aliases": ["mdm integration"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "device_posture_check": {
      "aliases": ["device check"],
      "operations": ["list", "list_defaults", "get"],
      "methods": ["GET"],
      "endpoint_count": 3
    },
    "group": {
      "aliases": ["groups"],
      "operations": ["list", "get", "list_assigned_apps", "list_members"],
      "methods": ["GET"],
      "endpoint_count": 4
    },
    "group_owner": {
      "aliases": ["group ownership"],
      "operations": ["list"],
      "methods": ["GET"],
      "endpoint_count": 1
    },
    "group_rule": {
      "aliases": ["dynamic group"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "log_stream": {
      "aliases": ["log streaming"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "network_zone": {
      "aliases": ["zone", "ip zone"],
      "operations": ["list", "get"],
      "methods": ["GET"],
      "endpoint_count": 2
    },
    "okta_application_settings": {
      "aliases": ["first party app settings"],
      "operations": ["get"],
      "methods": ["GET"],
      "endpoint_count": 1
    },
    "policy": {
      "aliases": ["policies", "sign on policy", "password policy", "mfa policy"],
      "operations": ["list", "get", "list_apps", "list_resources", "get_resource_mapping", "list_rules", "get_rule"],
      "methods": ["GET"],
      "endpoint_count": 7
    },
    "resource_set": {
      "aliases": ["iam resource set"],
      "operations": ["list", "get", "list_resources", "get_resource", "list_bindings", "get_binding", "list_binding_members", "get_binding_member"],
      "methods": ["GET"],
      "endpoint_count": 8
    },
    "role_assignment": {
      "aliases": ["roles", "permissions", "admin role"],
      "operations": [
        "list_users_with_roles",
        "list_by_user",
        "get_for_user",
        "list_governance_sources_for_user_role",
        "get_governance_source_for_user_role",
        "list_governance_source_resources_for_user_role",
        "list_app_targets_for_user_role",
        "list_group_targets_for_user_role",
        "get_role_targets_by_assignment_type",
        "list_by_group",
        "get_for_group",
        "list_by_client",
        "get_for_client",
        "list_app_targets_for_group_role",
        "list_group_targets_for_group_role",
        "list_app_targets_for_client_role",
        "list_group_targets_for_client_role"
      ],
      "methods": ["GET"],
      "endpoint_count": 17
    },
    "system_log": {
      "aliases": ["logs", "events", "audit trail"],
      "operations": ["list_events"],
      "methods": ["GET"],
      "endpoint_count": 1
    },
    "user": {
      "aliases": ["users", "person", "account", "people"],
      "operations": ["list", "get", "list_blocks", "list_app_links", "list_groups", "list_clients", "list_devices"],
      "methods": ["GET"],
      "endpoint_count": 7
    },
    "user_authenticator": {
      "aliases": ["user factor", "mfa enrollment"],
      "operations": [
        "list_enrollments",
        "get_enrollment",
        "list_yubikey_tokens",
        "get_yubikey_token",
        "list_factors",
        "list_supported_factors",
        "list_supported_security_questions",
        "get_factor",
        "get_factor_transaction_status"
      ],
      "methods": ["GET"],
      "endpoint_count": 9
    }
  },
  "endpoints": [
    {
      "id": "list-applications",
      "method": "GET",
      "url_pattern": "/api/v1/apps",
      "name": "List all applications",
      "entity": "application",
      "operation": "list",
      "description": "Lists all apps in the org.",
      "folder_path": "Applications",
      "parameters": { "required": [], "optional": ["q", "after", "useOptimization", "limit", "filter", "expand", "includeNonDeleted"] },
      "depends_on": ["list-application-keys"],
      "notes": "## Query Parameters\n*   **`q`** (String, Optional): Searches for apps with name or label properties that start with the specified value. Example: `q=Office` finds \"Office 365\", \"Office Mobile\".\n*   **`filter`** (String, Optional): SCIM filter expression for status, user assignments, group assignments, credentials. Examples: `status eq \"ACTIVE\"`, `user.id eq \"userId\"`, `group.id eq \"groupId\"`, `signOnMode eq \"SAML_2_0\"`, `credentials.signing.kid eq \"keyId\"`.\n*   **`expand`** (String, Optional): Use `expand=user/{userId}` to include assigned application user details in the `_embedded` property. Must be used with `user.id eq \"{userId}\"` filter.\n*   **`limit`** (Integer, Optional): Number of results per page (default: 20, max: 200).\n*   **`after`** (String, Optional): Pagination cursor for the next page of results.\n*   **`useOptimization`** (Boolean, Optional): Set to true to return a subset of app properties for better performance.\n*   **`includeNonDeleted`** (Boolean, Optional): Include non-active but not deleted apps in results.\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `q` for searching by application name/label (simple text matching), use `filter` for structured queries (status, assignments, authentication modes).\n*   Filter expressions must be URL encoded.\n*   Common filters: `status eq \"ACTIVE\"` (active apps), `user.id eq \"userId\"` (user assignments), `group.id eq \"groupId\"` (group assignments).\n*   For access analysis, combine with user/group assignment endpoints."
    },
    {
      "id": "get-application",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}",
      "name": "Retrieve an application",
      "entity": "application",
      "operation": "get",
      "description": "Retrieves an application by its ID.",
      "folder_path": "Applications",
      "parameters": { "required": ["appId"], "optional": ["expand"] },
      "depends_on": ["list-applications", "list-application-keys", "list-application-secrets"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The unique ID of the application, obtained from an endpoint like `list-applications`.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=user/{userId}` to include a specific user's assignment details in the `_embedded` property.\n\n## Parameter Usage Notes\n*   **CRITICAL**: The `expand=user/{userId}` parameter requires a specific user ID and only works when retrieving application details for that specific user context.\n*   This expand pattern is primarily used when checking application configuration from a specific user's perspective.\n*   For general application details without user-specific context, omit the expand parameter.\n\n## Important Notes\n*   This endpoint will **NOT** return sensitive credentials like `client_secret`. The secret is only available upon application creation.\n*   For security analysis, use `list-application-keys` for certificates and `list-application-secrets` for OAuth secrets."
    },
    {
      "id": "get-default-application-connection",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/connections/default",
      "name": "Retrieve the default provisioning connection",
      "entity": "application_connection",
      "operation": "get_default",
      "description": "Retrieves the default provisioning connection for an app.",
      "folder_path": "Application Connections",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application with provisioning enabled.\n\n## Important Notes\n*   This is used to check the provisioning settings (like SCIM configuration) for an application."
    },
    {
      "id": "get-application-connection-jwks",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/connections/default/jwks",
      "name": "Retrieve a JSON Web Key Set (JWKS) for the default provisioning connection",
      "entity": "application_connection",
      "operation": "get_jwks",
      "description": "Retrieves a JWKS for the default provisioning connection.",
      "folder_path": "Application Connections",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the OAuth 2.0 application.\n\n## Important Notes\n*   The returned JWKS can be used by a target org to validate tokens from this application."
    },
    {
      "id": "list-application-features",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/features",
      "name": "List all features",
      "entity": "application_feature",
      "operation": "list",
      "description": "Lists all features for an app, such as `USER_PROVISIONING`.",
      "folder_path": "Application Features",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n\n## Important Notes\n*   Returns an error if provisioning is not enabled for the app. Common features include `USER_PROVISIONING` and `IMPORT_PROVISIONING`."
    },
    {
      "id": "get-application-feature",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/features/{featureName}",
      "name": "Retrieve a feature",
      "entity": "application_feature",
      "operation": "get",
      "description": "Retrieves a feature object for an app.",
      "folder_path": "Application Features",
      "parameters": { "required": ["appId", "featureName"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`featureName`** (String, Required): The name of the feature, e.g., `USER_PROVISIONING`."
    },
    {
      "id": "list-application-grants",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/grants",
      "name": "List all app grants",
      "entity": "application_grant",
      "operation": "list",
      "description": "Lists all scope consent grants for the application.",
      "folder_path": "Application Grants",
      "parameters": { "required": ["appId"], "optional": ["expand"] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application (must be an OAuth 2.0 client).\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=scope` to include scope details in grants.\n\n## Important Notes\n*   This shows which users have consented to which OAuth scopes for this application.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns grant data with application IDs but lacks human-readable application details (name, label, status). Planning agent must add a follow-up step to fetch application details for meaningful results."
    },
    {
      "id": "get-application-grant",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/grants/{grantId}",
      "name": "Retrieve an app grant",
      "entity": "application_grant",
      "operation": "get",
      "description": "Retrieves a single scope consent grant object for the app.",
      "folder_path": "Application Grants",
      "parameters": { "required": ["appId", "grantId"], "optional": ["expand"] },
      "depends_on": ["list-applications", "list-application-grants"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`grantId`** (String, Required): The ID of the grant, obtained from `list-application-grants`.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=scope` to include scope details for specific grant.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns grant data with application ID but lacks human-readable application details (name, label, status). Planning agent must add a follow-up step to fetch application details for meaningful results."
    },
    {
      "id": "list-application-group-assignments",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/groups",
      "name": "List all application groups",
      "entity": "application_assignment",
      "operation": "list_group_assignments",
      "description": "Lists all groups assigned to a specific application.",
      "folder_path": "Application Groups",
      "parameters": { "required": ["appId"], "optional": ["q", "after", "limit", "expand"] },
      "depends_on": ["list-applications", "list-application-user-assignments", "list-policies"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application for which to list group assignments.\n\n## Query Parameters\n*   **`q`** (String, Optional): Filter groups by name. Matches against group name with startsWith behavior.\n*   **`expand`** (String, Optional): Use `expand=group` to include full group objects instead of just assignments.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n*   **`limit`** (Integer, Optional): Number of objects per page.\n\n## Parameter Usage Notes\n*   **CRITICAL**: The `q` parameter only supports simple text matching against group names with startsWith behavior - no SCIM expressions supported.\n*   Use `expand=group` to get full group details instead of just assignment information.\n\n## Important Notes\n*   This endpoint is used to discover which groups have been granted access to a specific application.\n*   For complete access analysis, also check `list-application-user-assignments` and policy mappings."
    },
    {
      "id": "get-application-group-assignment",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/groups/{groupId}",
      "name": "Retrieve an application group",
      "entity": "application_assignment",
      "operation": "get_group_assignment",
      "description": "Retrieves a specific group's assignment to a specific application.",
      "folder_path": "Application Groups",
      "parameters": { "required": ["appId", "groupId"], "optional": ["expand"] },
      "depends_on": ["list-applications", "list-groups"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`groupId`** (String, Required): The ID of the group.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=group` to include full group object for specific assignment.\n\n## Important Notes\n*   Use this to check the details of a specific assignment, such as the priority or profile information."
    },
    {
      "id": "get-application-saml-metadata",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/sso/saml/metadata",
      "name": "Preview the application SAML metadata",
      "entity": "application_sso",
      "operation": "get_saml_metadata",
      "description": "Previews the SSO SAML metadata for a SAML application.",
      "folder_path": "Application SSO",
      "parameters": { "required": ["appId"], "optional": ["kid"] },
      "depends_on": ["list-applications", "list-application-keys", "list-application-jwks"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the SAML application.\n\n## Query Parameters\n*   **`kid`** (String, Optional): The ID of the key to use for signing the metadata. If not provided, the most recently created key is used. you MSUT use list-application-keys to get expirty dates and other detils on the saml signing keys for the application"
    },
    {
      "id": "list-application-csrs",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/csrs",
      "name": "List all certificate signing requests",
      "entity": "application_credential",
      "operation": "list_csrs",
      "description": "Lists all Certificate Signing Requests for an application.",
      "folder_path": "Application Key Credentials",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application."
    },
    {
      "id": "get-application-csr",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/csrs/{csrId}",
      "name": "Retrieve a certificate signing request",
      "entity": "application_credential",
      "operation": "get_csr",
      "description": "Retrieves a Certificate Signing Request (CSR) for the app.",
      "folder_path": "Application Key Credentials",
      "parameters": { "required": ["appId", "csrId"], "optional": [] },
      "depends_on": ["list-applications", "list-application-csrs"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`csrId`** (String, Required): The ID of the CSR, obtained from `list-application-csrs`.\n\n## Important Notes\n*   The format of the response depends on the `Accept` header. Use `application/pkcs10` for a Base64 encoded CSR or `application/json` for a JSON object."
    },
    {
      "id": "list-application-keys",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/keys",
      "name": "List all key credentials",
      "entity": "application_credential",
      "operation": "list_keys",
      "description": "Lists all key credentials for an app.",
      "folder_path": "Application Key Credentials",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application. You MUST use this to get expiry dates for SAML applications keys. This is where you get all the key details including expiry dates."
    },
    {
      "id": "get-application-key",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/keys/{keyId}",
      "name": "Retrieve a key credential",
      "entity": "application_credential",
      "operation": "get_key",
      "description": "Retrieves a specific Application Key Credential by its ID (kid).",
      "folder_path": "Application Key Credentials",
      "parameters": { "required": ["appId", "keyId"], "optional": [] },
      "depends_on": ["list-applications", "list-application-keys"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`keyId`** (String, Required): The ID of the key, obtained from `list-application-keys`."
    },
    {
      "id": "list-application-jwks",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/jwks",
      "name": "List all the OAuth 2.0 client JSON Web Keys",
      "entity": "application_credential",
      "operation": "list_jwks",
      "description": "Lists all JSON Web Keys for an OAuth 2.0 client app.",
      "folder_path": "Application Client Auth Credentials",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the OAuth 2.0 application."
    },
    {
      "id": "get-application-jwk",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/jwks/{keyId}",
      "name": "Retrieve an OAuth 2.0 client JSON Web Key",
      "entity": "application_credential",
      "operation": "get_jwk",
      "description": "Retrieves an OAuth 2.0 Client JSON Web Key by key ID.",
      "folder_path": "Application Client Auth Credentials",
      "parameters": { "required": ["appId", "keyId"], "optional": [] },
      "depends_on": ["list-applications", "list-application-jwks"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`keyId`** (String, Required): The ID of the key (kid), obtained from `list-application-jwks`."
    },
    {
      "id": "list-application-secrets",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/secrets",
      "name": "List all OAuth 2.0 client secrets",
      "entity": "application_credential",
      "operation": "list_secrets",
      "description": "Lists all client secrets for an OAuth 2.0 client app.",
      "folder_path": "Application Client Auth Credentials",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the OAuth 2.0 application.\n\n## Important Notes\n*   This lists the secret objects, but does not reveal the secret values."
    },
    {
      "id": "get-application-secret",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/credentials/secrets/{secretId}",
      "name": "Retrieve an OAuth 2.0 client secret",
      "entity": "application_credential",
      "operation": "get_secret",
      "description": "Retrieves an OAuth 2.0 Client Secret's metadata by its ID.",
      "folder_path": "Application Client Auth Credentials",
      "parameters": { "required": ["appId", "secretId"], "optional": [] },
      "depends_on": ["list-applications", "list-application-secrets"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`secretId`** (String, Required): The ID of the secret, obtained from `list-application-secrets`.\n\n## Important Notes\n*   This endpoint retrieves the secret's metadata (ID, last updated), not the secret value itself."
    },
    {
      "id": "list-application-federated-claims",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/federated-claims",
      "name": "List all configured federated claims",
      "entity": "application_federated_claim",
      "operation": "list",
      "description": "Lists all federated claims configured for your application.",
      "folder_path": "Application Federated Claims",
      "parameters": { "required": ["appId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application."
    },
    {
      "id": "get-application-federated-claim",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/federated-claims/{claimId}",
      "name": "Retrieve a federated claim",
      "entity": "application_federated_claim",
      "operation": "get",
      "description": "Retrieves a configured federated claim by its ID.",
      "folder_path": "Application Federated Claims",
      "parameters": { "required": ["appId", "claimId"], "optional": [] },
      "depends_on": ["list-applications", "list-application-federated-claims"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`claimId`** (String, Required): The ID of the claim, obtained from `list-application-federated-claims`."
    },
    {
      "id": "list-application-tokens",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/tokens",
      "name": "List all application refresh tokens",
      "entity": "application_token",
      "operation": "list",
      "description": "Lists all refresh tokens for an application.",
      "folder_path": "Application Tokens",
      "parameters": { "required": ["appId"], "optional": ["expand", "after", "limit"] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the OAuth 2.0 application.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=scope` to include scope details in token listings.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns token data with application IDs but lacks human-readable application details (name, label, status). Planning agent must add a follow-up step to fetch application details for meaningful results."
    },
    {
      "id": "get-application-token",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/tokens/{tokenId}",
      "name": "Retrieve an application token",
      "entity": "application_token",
      "operation": "get",
      "description": "Retrieves a refresh token for the specified application.",
      "folder_path": "Application Tokens",
      "parameters": { "required": ["appId", "tokenId"], "optional": ["expand"] },
      "depends_on": ["list-applications", "list-application-tokens"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`tokenId`** (String, Required): The ID of the token, obtained from `list-application-tokens`.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=scope` to include scope details for specific token.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns token data with application ID but lacks human-readable application details (name, label, status). Planning agent must add a follow-up step to fetch application details for meaningful results."
    },
    {
      "id": "list-application-user-assignments",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/users",
      "name": "List all application users",
      "entity": "application_assignment",
      "operation": "list_user_assignments",
      "description": "Lists all users directly assigned to a specific application.",
      "folder_path": "Application Users",
      "parameters": { "required": ["appId"], "optional": ["after", "limit", "q", "expand"] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application for which to list user assignments.\n\n## Query Parameters\n*   **`q`** (String, Optional): Filter users by profile attributes. Matches against beginning of `userName`, `firstName`, `lastName`, and `email`. Supports startsWith operation only. For OIDC apps, only matches `userName` and `email`.\n*   **`expand`** (String, Optional): Include full User object in `_embedded` property. Valid value: `user`.\n*   **`limit`** (Integer, Optional): Number of objects per page. Use Link header for pagination.\n*   **`after`** (String, Optional): Pagination cursor for next page. Use value from previous response's next link.\n\n## Parameter Usage Notes\n*   **CRITICAL**: The `q` parameter only supports startsWith matching and is limited to specific profile fields (`userName`, `firstName`, `lastName`, `email`).\n*   For OIDC applications, `q` parameter is further restricted to `userName` and `email` only.\n*   No SCIM expressions or complex filtering supported - use simple text matching only.\n*   Use `expand=user` to get full user details instead of just assignment information.\n\n## Important Notes\n*   Returns only directly assigned users, not users assigned through group membership.\n*   For complete user access analysis, also check group assignments and role mappings."
    },
    {
      "id": "get-application-user-assignment",
      "method": "GET",
      "url_pattern": "/api/v1/apps/{appId}/users/{userId}",
      "name": "Retrieve an application user",
      "entity": "application_assignment",
      "operation": "get_user_assignment",
      "description": "Retrieves a specific user's assignment for a specific application.",
      "folder_path": "Application Users",
      "parameters": { "required": ["appId", "userId"], "optional": ["expand"] },
      "depends_on": ["list-applications", "list-users"],
      "notes": "## Path Parameters\n*   **`appId`** (String, Required): The ID of the application.\n*   **`userId`** (String, Required): The ID of the user.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Use `expand=user` to include full user object instead of just assignment.\n\n## Important Notes\n*   Use this to get details of a specific assignment, like the username specific to that application if it differs from their Okta username."
    },
    {
      "id": "get-authenticator-well-known-config",
      "method": "GET",
      "url_pattern": "/.well-known/app-authenticator-configuration",
      "name": "Retrieve the well-known app authenticator configuration",
      "entity": "authenticator",
      "operation": "get_well_known_config",
      "description": "Retrieves the well-known app authenticator configuration.",
      "folder_path": "Authenticators",
      "parameters": { "required": ["oauthClientId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Query Parameters\n*   **`oauthClientId`** (String, Required): The Client ID of the Okta Verify application instance.\n\n## Important Notes\n*   This endpoint is not on the `/api/v1` path. It is used for Okta FastPass configuration."
    },
    {
      "id": "list-authenticators",
      "method": "GET",
      "url_pattern": "/api/v1/authenticators",
      "name": "List all authenticators",
      "entity": "authenticator",
      "operation": "list",
      "description": "Lists all authenticators configured in the Okta organization.",
      "folder_path": "Authenticators",
      "parameters": { "required": [], "optional": [] },
      "depends_on": [],
      "notes": "## Important Notes\n*   This returns a list of all available authenticator types in your org, such as Okta Verify, Google Authenticator, or Password."
    },
    {
      "id": "get-authenticator",
      "method": "GET",
      "url_pattern": "/api/v1/authenticators/{authenticatorId}",
      "name": "Retrieve an authenticator",
      "entity": "authenticator",
      "operation": "get",
      "description": "Retrieves an authenticator by its ID.",
      "folder_path": "Authenticators",
      "parameters": { "required": ["authenticatorId"], "optional": [] },
      "depends_on": ["list-authenticators"],
      "notes": "## Path Parameters\n*   **`authenticatorId`** (String, Required): The ID of the authenticator, obtained from `list-authenticators`."
    },
    {
      "id": "list-authenticator-methods",
      "method": "GET",
      "url_pattern": "/api/v1/authenticators/{authenticatorId}/methods",
      "name": "List all methods of an authenticator",
      "entity": "authenticator",
      "operation": "list_methods",
      "description": "Lists all methods of an authenticator.",
      "folder_path": "Authenticators",
      "parameters": { "required": ["authenticatorId"], "optional": [] },
      "depends_on": ["list-authenticators"],
      "notes": "## Path Parameters\n*   **`authenticatorId`** (String, Required): The ID of the authenticator.\n\n## Important Notes\n*   For an authenticator like Okta Verify, this might list methods like `push`, `totp`, etc."
    },
    {
      "id": "get-authenticator-method",
      "method": "GET",
      "url_pattern": "/api/v1/authenticators/{authenticatorId}/methods/{methodType}",
      "name": "Retrieve an authenticator method",
      "entity": "authenticator",
      "operation": "get_method",
      "description": "Retrieves a method of an authenticator.",
      "folder_path": "Authenticators",
      "parameters": { "required": ["authenticatorId", "methodType"], "optional": [] },
      "depends_on": ["list-authenticators"],
      "notes": "## Path Parameters\n*   **`authenticatorId`** (String, Required): The ID of the authenticator.\n*   **`methodType`** (String, Required): The type of the method, e.g., `sms`, `voice`, `totp`."
    },
    {
      "id": "list-behavior-rules",
      "method": "GET",
      "url_pattern": "/api/v1/behaviors",
      "name": "List all behavior detection rules",
      "entity": "behavior_rule",
      "operation": "list",
      "description": "Lists all behavior detection rules.",
      "folder_path": "Behavior Rules",
      "parameters": { "required": [], "optional": [] },
      "depends_on": [],
      "notes": "## Parameter Usage Notes\n*   **SIMPLE ENDPOINT**: No query parameters available - this is a simple list endpoint returning all behavior detection rules.\n*   No filtering, searching, or pagination parameters supported.\n*   Returns all behavior rules configured in the organization.\n*   Use individual rule retrieval (`get-behavior-rule`) for specific rule details.\n\n## Important Notes\n*   Behavior rules detect unusual activity, like a login from a new device or location.\n*   This endpoint provides a complete inventory of all behavior detection rules."
    },
    {
      "id": "get-behavior-rule",
      "method": "GET",
      "url_pattern": "/api/v1/behaviors/{behaviorId}",
      "name": "Retrieve a behavior detection rule",
      "entity": "behavior_rule",
      "operation": "get",
      "description": "Retrieves a Behavior Detection Rule by its ID.",
      "folder_path": "Behavior Rules",
      "parameters": { "required": ["behaviorId"], "optional": [] },
      "depends_on": ["list-behavior-rules"],
      "notes": "## Path Parameters\n*   **`behaviorId`** (String, Required): The ID of the behavior rule, obtained from `list-behavior-rules`."
    },
    {
      "id": "list-devices",
      "method": "GET",
      "url_pattern": "/api/v1/devices",
      "name": "List all devices",
      "entity": "device",
      "operation": "list",
      "description": "Lists all devices in the Okta Device Trust inventory.",
      "folder_path": "Devices",
      "parameters": { "required": [], "optional": ["after", "limit", "search", "expand"] },
      "depends_on": ["list-device-assurance-policies", "list-device-posture-checks", "list-users-for-device"],
      "notes": "## Query Parameters\n*   **`search`** (String, Optional): SCIM filter expression for device properties. Searchable fields: `status`, `lastUpdated`, `id`, `profile.displayName`, `profile.serialNumber`, `profile.platform`, `profile.model`.\n*   **`expand`** (String, Optional): Use `expand=user` to include associated user details and management status in `_embedded` property.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n*   **`limit`** (Integer, Optional): Number of results per page.\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `search` parameter for SCIM filtering on device properties - supports operators: `eq` (equals), `co` (contains) for select profile attributes.\n*   Searchable device fields: `status` (ACTIVE, SUSPENDED), `profile.platform` (IOS, ANDROID, WINDOWS, MACOS), `profile.displayName`, `profile.serialNumber`.\n*   Filter expressions must be URL encoded.\n*   Use `expand=user` to get user ownership and management details.\n\n## Example Searches\n*   Active devices: `search=status eq \"ACTIVE\"`\n*   iOS devices: `search=profile.platform eq \"IOS\"`\n*   Device by name: `search=profile.displayName co \"iPhone\"`\n*   Specific device: `search=profile.serialNumber eq \"ABC123\"`\n\n## Important Notes\n*   For device compliance analysis, also check `list-device-assurance-policies` and `list-device-posture-checks`."
    },
    {
      "id": "get-device",
      "method": "GET",
      "url_pattern": "/api/v1/devices/{deviceId}",
      "name": "Retrieve a device",
      "entity": "device",
      "operation": "get",
      "description": "Retrieves a device by its ID.",
      "folder_path": "Devices",
      "parameters": { "required": ["deviceId"], "optional": [] },
      "depends_on": ["list-devices", "list-device-assurance-policies", "list-device-posture-checks"],
      "notes": "## Path Parameters\n*   **`deviceId`** (String, Required): The ID of the device, obtained from `list-devices`.\n\n## Important Notes\n*   For device compliance analysis, also check `list-device-assurance-policies` and `list-device-posture-checks`."
    },
    {
      "id": "list-users-for-device",
      "method": "GET",
      "url_pattern": "/api/v1/devices/{deviceId}/users",
      "name": "List all users for a device",
      "entity": "device",
      "operation": "list_users",
      "description": "Lists all users associated with a specific device.",
      "folder_path": "Devices",
      "parameters": { "required": ["deviceId"], "optional": [] },
      "depends_on": ["list-devices"],
      "notes": "## Path Parameters\n*   **`deviceId`** (String, Required): The ID of the device."
    },
    {
      "id": "list-device-assurance-policies",
      "method": "GET",
      "url_pattern": "/api/v1/device-assurances",
      "name": "List all device assurance policies",
      "entity": "device_assurance_policy",
      "operation": "list",
      "description": "Lists all device assurance policies.",
      "folder_path": "Device Assurance Policies",
      "parameters": { "required": [], "optional": [] },
      "depends_on": [],
      "notes": "## Important Notes\n*   Device assurance policies are used to ensure a device meets certain criteria (e.g., OS version) before allowing access.\n\n## PLANNING AGENT NOTICE: REQUIRES_CONTEXTUAL_ANALYSIS\nThis endpoint returns the definition of a Device Assurance Policy. To understand its impact, you must find where it is enforced. Check the rules of Authentication Policies (type `ACCESS_POLICY`) to see which ones require this policy for user access."
    },
    {
      "id": "get-device-assurance-policy",
      "method": "GET",
      "url_pattern": "/api/v1/device-assurances/{deviceAssuranceId}",
      "name": "Retrieve a device assurance policy",
      "entity": "device_assurance_policy",
      "operation": "get",
      "description": "Retrieves a device assurance policy by its ID.",
      "folder_path": "Device Assurance Policies",
      "parameters": { "required": ["deviceAssuranceId"], "optional": [] },
      "depends_on": ["list-device-assurance-policies"],
      "notes": "## Path Parameters\n*   **`deviceAssuranceId`** (String, Required): The ID of the policy, obtained from `list-device-assurance-policies`.\n\n## PLANNING AGENT NOTICE: REQUIRES_CONTEXTUAL_ANALYSIS\nThis endpoint returns the definition of a Device Assurance Policy. To understand its impact, you must find where it is enforced. Check the rules of Authentication Policies (type `ACCESS_POLICY`) to see which ones require this policy for user access."
    },
    {
      "id": "list-device-integrations",
      "method": "GET",
      "url_pattern": "/api/v1/device-integrations",
      "name": "List all device integrations",
      "entity": "device_integration",
      "operation": "list",
      "description": "Lists all device integrations for your org.",
      "folder_path": "Device Integrations",
      "parameters": { "required": [], "optional": [] },
      "depends_on": [],
      "notes": "## Important Notes\n*   Examples include MDM integrations like Jamf Pro or VMWare Workspace ONE."
    },
    {
      "id": "get-device-integration",
      "method": "GET",
      "url_pattern": "/api/v1/device-integrations/{deviceIntegrationId}",
      "name": "Retrieve a device integration",
      "entity": "device_integration",
      "operation": "get",
      "description": "Retrieves a device integration by its ID.",
      "folder_path": "Device Integrations",
      "parameters": { "required": ["deviceIntegrationId"], "optional": [] },
      "depends_on": ["list-device-integrations"],
      "notes": "## Path Parameters\n*   **`deviceIntegrationId`** (String, Required): The ID of the integration, obtained from `list-device-integrations`."
    },
    {
      "id": "list-device-posture-checks",
      "method": "GET",
      "url_pattern": "/api/v1/device-posture-checks",
      "name": "List all device posture checks",
      "entity": "device_posture_check",
      "operation": "list",
      "description": "Lists all device posture checks.",
      "folder_path": "Device Posture Checks",
      "parameters": { "required": [], "optional": [] },
      "depends_on": [],
      "notes": "## Important Notes\n*   Device posture checks are specific queries run against a device, e.g., 'Is disk encryption enabled?'\n\n## PLANNING AGENT NOTICE: REQUIRES_CONTEXTUAL_ANALYSIS\nThis endpoint defines a specific device check. To understand its effect, you must first find which Device Assurance Policy uses this check, and then determine which Authentication Policy (type `ACCESS_POLICY`) enforces that assurance policy."
    },
    {
      "id": "list-default-device-posture-checks",
      "method": "GET",
      "url_pattern": "/api/v1/device-posture-checks/default",
      "name": "List all default device posture checks",
      "entity": "device_posture_check",
      "operation": "list_defaults",
      "description": "Lists all default device posture checks defined by Okta.",
      "folder_path": "Device Posture Checks",
      "parameters": { "required": [], "optional": [] },
      "depends_on": [],
      "notes": "## Important Notes\n*   These are the built-in posture checks provided by Okta out of the box."
    },
    {
      "id": "get-device-posture-check",
      "method": "GET",
      "url_pattern": "/api/v1/device-posture-checks/{postureCheckId}",
      "name": "Retrieve a device posture check",
      "entity": "device_posture_check",
      "operation": "get",
      "description": "Retrieves a device posture check by its ID.",
      "folder_path": "Device Posture Checks",
      "parameters": { "required": ["postureCheckId"], "optional": [] },
      "depends_on": ["list-device-posture-checks"],
      "notes": "## Path Parameters\n*   **`postureCheckId`** (String, Required): The ID of the posture check, obtained from `list-device-posture-checks`.\n\n## PLANNING AGENT NOTICE: REQUIRES_CONTEXTUAL_ANALYSIS\nThis endpoint defines a specific device check. To understand its effect, you must first find which Device Assurance Policy uses this check, and then determine which Authentication Policy (type `ACCESS_POLICY`) enforces that assurance policy."
    },
    {
      "id": "list-groups",
      "method": "GET",
      "url_pattern": "/api/v1/groups",
      "name": "List all groups",
      "entity": "group",
      "operation": "list",
      "description": "Lists all groups in the organization.",
      "folder_path": "Groups",
      "parameters": { "required": [], "optional": ["search", "filter", "q", "after", "limit", "expand", "sortBy", "sortOrder"] },
      "depends_on": ["list-group-members", "list-groups-assigned-apps", "list-group-roles"],
      "notes": "## Query Parameters\n*   **`search`** (String, Optional): Advanced filtering using expressions for profile attributes. Example: `search=profile.name eq \"West Coast users\"`. Supports `sw` (starts with), `eq` (equals), `co` (contains) operators. URL encoding required.\n*   **`filter`** (String, Optional): Basic filter expression for system attributes only (id, type, lastUpdated, lastMembershipUpdated). Example: `filter=type eq \"OKTA_GROUP\"`.\n*   **`q`** (String, Optional): Quick search matching group name property. Example: `q=Sales`. Default limit 300 results.\n*   **`expand`** (String, Optional): Include metadata in response. Values: `stats` (user count in `_embedded.stats.usersCount`) or `app` (application details).\n*   **`limit`** (Integer, Optional): Number of results per page. Recommended ≤200. Default varies based on query type.\n*   **`after`** (String, Optional): Pagination cursor for next page. Use value from previous response's next link.\n*   **`sortBy`** (String, Optional): Sort field (search queries only). Example: `sortBy=profile.name`.\n*   **`sortOrder`** (String, Optional): Sort direction `asc` or `desc` (search queries only). Requires `sortBy`.\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `search` for profile attributes (profile.name, profile.description), use `filter` for system attributes (id, type, lastUpdated) - mixing these causes \"Invalid search criteria\" errors.\n*   Search and pagination are mutually exclusive - cannot page search results.\n*   Query (`q`) has different limit behavior than search/filter.\n*   All filter expressions must be URL encoded.\n*   For access analysis, also check `list-group-members`, `list-groups-assigned-apps`, and `list-group-roles`."
    },
    {
      "id": "get-group",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}",
      "name": "Retrieve a group",
      "entity": "group",
      "operation": "get",
      "description": "Retrieves a specific group by its ID.",
      "folder_path": "Groups",
      "parameters": { "required": ["groupId"], "optional": [] },
      "depends_on": ["list-groups"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The unique identifier for the group, obtained from the `list-groups` endpoint.\n\n## Important Notes\n*   This is the most direct way to get all details for a single, known group."
    },
    {
      "id": "list-assigned-apps-for-group",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/apps",
      "name": "List all assigned apps",
      "entity": "group",
      "operation": "list_assigned_apps",
      "description": "Lists all applications that are assigned to a specific group.",
      "folder_path": "Groups",
      "parameters": { "required": ["groupId"], "optional": ["after", "limit"] },
      "depends_on": ["list-groups"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group for which to list assigned applications.\n\n## Important Notes\n*   This is the primary way to discover what applications a group's members get access to via group rules."
    },
    {
      "id": "list-group-members",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/users",
      "name": "List all member users",
      "entity": "group",
      "operation": "list_members",
      "description": "Lists all users that are members of a specific group.",
      "folder_path": "Groups",
      "parameters": { "required": ["groupId"], "optional": ["after", "limit"] },
      "depends_on": ["list-groups"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group for which to list members.\n\n## Important Notes\n*   This endpoint provides a complete roster of all users within a specified group."
    },
    {
      "id": "list-group-owners",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/owners",
      "name": "List all group owners",
      "entity": "group_owner",
      "operation": "list",
      "description": "Lists all owners for a specific group.",
      "folder_path": "Group Owners",
      "parameters": { "required": ["groupId"], "optional": ["search", "after", "limit"] },
      "depends_on": ["list-groups"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group.\n\n## Important Notes\n*   Group owners have administrative rights over the group's membership."
    },
    {
      "id": "list-group-rules",
      "method": "GET",
      "url_pattern": "/api/v1/groups/rules",
      "name": "List all group rules",
      "entity": "group_rule",
      "operation": "list",
      "description": "Lists all group rules for your organization.",
      "folder_path": "Group Rules",
      "parameters": { "required": [], "optional": ["limit", "after", "search", "expand"] },
      "depends_on": [],
      "notes": "## Query Parameters\n*   **`expand`** (String, Optional): Include additional rule details in the response.\n\n## Important Notes\n*   Group rules allow you to dynamically assign users to groups based on their profile attributes.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns group rule data with group IDs but lacks human-readable group details (name, description). Planning agent must add a follow-up step to fetch group details for meaningful results."
    },
    {
      "id": "get-group-rule",
      "method": "GET",
      "url_pattern": "/api/v1/groups/rules/{groupRuleId}",
      "name": "Retrieve a group rule",
      "entity": "group_rule",
      "operation": "get",
      "description": "Retrieves a specific group rule by its ID.",
      "folder_path": "Group Rules",
      "parameters": { "required": ["groupRuleId"], "optional": ["expand"] },
      "depends_on": ["list-group-rules"],
      "notes": "## Path Parameters\n*   **`groupRuleId`** (String, Required): The ID of the group rule, obtained from `list-group-rules`.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Include additional rule details in the response.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns group rule data with group IDs but lacks human-readable group details (name, description). Planning agent must add a follow-up step to fetch group details for meaningful results."
    },
    {
      "id": "list-log-streams",
      "method": "GET",
      "url_pattern": "/api/v1/logStreams",
      "name": "List all log streams",
      "entity": "log_stream",
      "operation": "list",
      "description": "Lists all log stream objects in your organization.",
      "folder_path": "Log Streaming",
      "parameters": { "required": [], "optional": ["after", "limit", "filter"] },
      "depends_on": [],
      "notes": "## Query Parameters\n*   **`filter`** (String, Optional): SCIM filter expression for log stream attributes. Common filterable fields: `status`, `type`, `name`.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n*   **`limit`** (Integer, Optional): Number of results per page.\n\n## Parameter Usage Notes\n*   **BASIC FILTERING**: Use `filter` for basic log stream filtering by status (ACTIVE/INACTIVE), type, or name.\n*   Filter expressions must be URL encoded.\n*   Common filters: `status eq \"ACTIVE\"`, `type eq \"aws_eventbridge\"`, `name sw \"Splunk\"`.\n\n## Important Notes\n*   Log streams are used to send Okta System Log events to external services like Splunk or Amazon EventBridge."
    },
    {
      "id": "get-log-stream",
      "method": "GET",
      "url_pattern": "/api/v1/logStreams/{logStreamId}",
      "name": "Retrieve a log stream",
      "entity": "log_stream",
      "operation": "get",
      "description": "Retrieves a log stream object by ID.",
      "folder_path": "Log Streaming",
      "parameters": { "required": ["logStreamId"], "optional": [] },
      "depends_on": ["list-log-streams"],
      "notes": "## Path Parameters\n*   **`logStreamId`** (String, Required): The ID of the log stream, obtained from `list-log-streams`."
    },
    {
      "id": "list-network-zones",
      "method": "GET",
      "url_pattern": "/api/v1/zones",
      "name": "List all network zones",
      "entity": "network_zone",
      "operation": "list",
      "description": "Lists all Network Zones in the organization.",
      "folder_path": "Network Zones",
      "parameters": { "required": [], "optional": ["after", "limit", "filter"] },
      "depends_on": [],
      "notes": "## Query Parameters\n*   **`filter`** (String, Optional): SCIM filter expression for zone attributes. Filterable fields: `id`, `usage`, `system`.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n*   **`limit`** (Integer, Optional): Number of results per page.\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `filter` for structured filtering on zone attributes: `usage eq \"POLICY\"`, `usage eq \"BLOCKLIST\"`, `system eq false`.\n*   Filter expressions must be URL encoded.\n*   Common usage values: `POLICY` (zones used in policies), `BLOCKLIST` (blocked IP ranges).\n*   System zones (`system eq true`) are Okta-managed, custom zones (`system eq false`) are user-created.\n\n## Example Filters\n*   Policy zones: `filter=usage eq \"POLICY\"`\n*   Custom zones only: `filter=system eq false`\n*   Specific zone: `filter=id eq \"zoneId\"`"
    },
    {
      "id": "get-network-zone",
      "method": "GET",
      "url_pattern": "/api/v1/zones/{zoneId}",
      "name": "Retrieve a network zone",
      "entity": "network_zone",
      "operation": "get",
      "description": "Retrieves a Network Zone by its ID.",
      "folder_path": "Network Zones",
      "parameters": { "required": ["zoneId"], "optional": [] },
      "depends_on": ["list-network-zones"],
      "notes": "## Path Parameters\n*   **`zoneId`** (String, Required): The ID of the network zone, obtained from `list-network-zones`."
    },
    {
      "id": "get-okta-application-settings",
      "method": "GET",
      "url_pattern": "/api/v1/first-party-app-settings/{appName}",
      "name": "Retrieve the Okta application settings",
      "entity": "okta_application_settings",
      "operation": "get",
      "description": "Retrieves the settings for an Okta first-party app.",
      "folder_path": "Okta Application Settings",
      "parameters": { "required": ["appName"], "optional": [] },
      "depends_on": [],
      "notes": "## Path Parameters\n*   **`appName`** (String, Required): The name of the Okta app. Common values are `okta_enduser` (for the End-User Dashboard) and `okta_admin_console` (for the Admin Console)."
    },
    {
      "id": "list-policies",
      "method": "GET",
      "url_pattern": "/api/v1/policies",
      "name": "List all policies",
      "entity": "policy",
      "operation": "list",
      "description": "Lists policies of a specified type.",
      "folder_path": "Policies",
      "parameters": { "required": ["type"], "optional": ["status", "q", "expand", "sortBy", "limit", "resourceId", "after"] },
      "depends_on": ["list-policy-rules"],
      "notes": "## Query Parameters\n*   **`type`** (String, REQUIRED): Mandatory parameter specifying policy type. Must be one of: `OKTA_SIGN_ON`, `PASSWORD`, `MFA_ENROLL`, `ACCESS_POLICY`, `OAUTH_AUTHORIZATION_POLICY`, `PROFILE_ENROLLMENT`, `ACCESS_POLICY_RULE`, `RESOURCE_ACCESS`.\n*   **`status`** (String, Optional): Filter by policy status. Values: `ACTIVE`, `INACTIVE`.\n*   **`q`** (String, Optional): Search by policy name (prefix matching). Example: `q=Sales` finds policies starting with \"Sales\".\n*   **`expand`** (String, Optional): Use `expand=rules` to include policy rules in response.\n*   **`sortBy`** (String, Optional): Sort field. Common values: `name`, `priority`, `lastUpdated`.\n*   **`limit`** (Integer, Optional): Number of results per page (default: 20, max: 200).\n*   **`resourceId`** (String, Optional): Filter policies by associated resource ID.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n\n## Parameter Usage Notes\n*   **CRITICAL**: The `type` parameter is REQUIRED - requests without it will fail. Always specify the policy type you want to retrieve.\n*   Use `q` for name-based searching (prefix matching).\n*   Use `status` to filter by ACTIVE/INACTIVE policies.\n*   Common policy types: `OKTA_SIGN_ON` (session), `PASSWORD` (password), `MFA_ENROLL` (MFA), `ACCESS_POLICY` (authentication).\n*   For comprehensive analysis, use `expand=rules` to include policy rules.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns policy data but may lack comprehensive human-readable details. Planning agent should consider if additional policy details are needed for meaningful results."
    },
    {
      "id": "get-policy",
      "method": "GET",
      "url_pattern": "/api/v1/policies/{policyId}",
      "name": "Retrieve a policy",
      "entity": "policy",
      "operation": "get",
      "description": "Retrieves a policy by its ID.",
      "folder_path": "Policies",
      "parameters": { "required": ["policyId"], "optional": ["expand"] },
      "depends_on": ["list-policies"],
      "notes": "## Path Parameters\n*   **`policyId`** (String, Required): The unique ID for the policy, obtained from a `list-policies` call.\n\n## Query Parameters\n*   **`expand`**: Use `expand=rules` to include all of the policy's rules in the same response.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns policy data but may lack comprehensive human-readable details. Planning agent should consider if additional policy details are needed for meaningful results."
    },
    {
      "id": "list-apps-for-policy",
      "method": "GET",
      "url_pattern": "/api/v1/policies/{policyId}/app",
      "name": "List all apps mapped to a policy",
      "entity": "policy",
      "operation": "list_apps",
      "description": "Lists all applications mapped to a policy.",
      "folder_path": "Policies",
      "parameters": { "required": ["policyId"], "optional": [] },
      "depends_on": ["list-policies", "list-policy-resource-mappings"],
      "notes": "## Path Parameters\n*   **`policyId`** (String, Required): The ID of the policy.\n\n## Important Notes\n*   This endpoint is considered legacy. It is better to use `list-policy-resource-mappings` for newer policy types like Authentication Policies."
    },
    {
      "id": "list-policy-resource-mappings",
      "method": "GET",
      "url_pattern": "/api/v1/policies/{policyId}/mappings",
      "name": "List all resources mapped to a policy",
      "entity": "policy",
      "operation": "list_resources",
      "description": "Lists all resources (like applications) mapped to a policy.",
      "folder_path": "Policies",
      "parameters": { "required": ["policyId"], "optional": [] },
      "depends_on": ["list-policies"],
      "notes": "## Path Parameters\n*   **`policyId`** (String, Required): The ID of the policy.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns policy resource mapping data with policy and resource IDs but lacks human-readable details. Planning agent must add follow-up steps to fetch policy and resource details for meaningful results."
    },
    {
      "id": "get-policy-resource-mapping",
      "method": "GET",
      "url_pattern": "/api/v1/policies/{policyId}/mappings/{mappingId}",
      "name": "Retrieve a policy resource mapping",
      "entity": "policy",
      "operation": "get_resource_mapping",
      "description": "Retrieves a resource mapping for a policy.",
      "folder_path": "Policies",
      "parameters": { "required": ["policyId", "mappingId"], "optional": [] },
      "depends_on": ["list-policies", "list-policy-resource-mappings"],
      "notes": "## Path Parameters\n*   **`policyId`** (String, Required): The ID of the policy.\n*   **`mappingId`** (String, Required): The ID of the mapping, obtained from `list-policy-resource-mappings`.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns policy resource mapping data with policy and resource IDs but lacks human-readable details. Planning agent must add follow-up steps to fetch policy and resource details for meaningful results."
    },
    {
      "id": "list-policy-rules",
      "method": "GET",
      "url_pattern": "/api/v1/policies/{policyId}/rules",
      "name": "List all policy rules",
      "entity": "policy",
      "operation": "list_rules",
      "description": "Lists all rules associated with a specific policy.",
      "folder_path": "Policies",
      "parameters": { "required": ["policyId"], "optional": ["limit"] },
      "depends_on": ["list-policies"],
      "notes": "## Path Parameters\n*   **`policyId`** (String, Required): The ID of the policy whose rules you want to list.\n\n## Important Notes\n*   Every policy's logic is defined by one or more rules. This endpoint is how you retrieve those rules."
    },
    {
      "id": "get-policy-rule",
      "method": "GET",
      "url_pattern": "/api/v1/policies/{policyId}/rules/{ruleId}",
      "name": "Retrieve a policy rule",
      "entity": "policy",
      "operation": "get_rule",
      "description": "Retrieves a specific rule from within a policy.",
      "folder_path": "Policies",
      "parameters": { "required": ["policyId", "ruleId"], "optional": [] },
      "depends_on": ["list-policies", "list-policy-rules"],
      "notes": "## Path Parameters\n*   **`policyId`** (String, Required): The ID of the policy that contains the rule.\n*   **`ruleId`** (String, Required): The ID of the specific rule to retrieve, obtained from a `list-policy-rules` call.\n\n## Important Notes\n*   Use this to get the specific conditions (e.g., user is in group X) and actions (e.g., allow access) for a single rule."
    },
    {
      "id": "list-users-with-roles",
      "method": "GET",
      "url_pattern": "/api/v1/iam/assignees/users",
      "name": "List all users with role assignments",
      "entity": "role_assignment",
      "operation": "list_users_with_roles",
      "description": "Lists all users that have at least one role assignment.",
      "folder_path": "User Role Assignments",
      "parameters": { "required": [], "optional": ["after", "limit"] },
      "depends_on": ["list-user-roles"],
      "notes": "## Important Notes\n*   This is a quick way to find all users who have been assigned any type of admin role. MUST use the `list-user-roles` endpoint to get detailed role information like role names .\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns user role data with user IDs but lacks human-readable user details (email, name, login). Planning agent must add a follow-up step to fetch user details for meaningful results."
    },
    {
      "id": "list-user-roles",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles",
      "name": "List all user role assignments",
      "entity": "role_assignment",
      "operation": "list_by_user",
      "description": "Lists all roles assigned to a specific user.",
      "folder_path": "User Role Assignments",
      "parameters": { "required": ["userId"], "optional": ["expand"] },
      "depends_on": ["list-users", "list-app-targets-for-user-role", "list-group-targets-for-user-role"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user for whom to list roles.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Include targets configured for role assignments in `_embedded` property. Supported values: `targets/groups` (group targets) or `targets/catalog/apps` (application targets).\n\n## Parameter Usage Notes\n*   **CRITICAL**: The `expand` parameter has specific values for different target types - use `expand=targets/groups` for group administration targets or `expand=targets/catalog/apps` for application administration targets.\n*   Cannot combine multiple expand values in a single request - choose the specific target type needed.\n*   Use expand parameter to get targets in same response instead of separate API calls.\n\n## Important Notes\n*   To understand what the user can actually manage, also check role targets using `list-app-targets-for-user-role` and `list-group-targets-for-user-role`.\n*   For complete administrative scope analysis, may need separate calls with different expand values.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns user role data with user IDs but lacks human-readable user details (email, name, login). Planning agent must add a follow-up step to fetch user details for meaningful results."
    },
    {
      "id": "get-user-role",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleAssignmentId}",
      "name": "Retrieve a user role assignment",
      "entity": "role_assignment",
      "operation": "get_for_user",
      "description": "Retrieves a specific role assigned to a user.",
      "folder_path": "User Role Assignments",
      "parameters": { "required": ["userId", "roleAssignmentId"], "optional": [] },
      "depends_on": ["list-users", "list-user-roles"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment, obtained from `list-user-roles`.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns user role data with user ID but lacks human-readable user details (email, name, login). Planning agent must add a follow-up step to fetch user details for meaningful results."
    },
    {
      "id": "list-governance-sources-for-user-role",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleAssignmentId}/governance",
      "name": "Retrieve all user role governance sources",
      "entity": "role_assignment",
      "operation": "list_governance_sources_for_user_role",
      "description": "Retrieves the governance sources of a role assigned to a user.",
      "folder_path": "User Role Assignments",
      "parameters": { "required": ["userId", "roleAssignmentId"], "optional": [] },
      "depends_on": ["list-users", "list-user-roles"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns governance source data with user and role IDs but lacks human-readable details. Planning agent must add follow-up steps to fetch user and governance source details for meaningful results."
    },
    {
      "id": "get-governance-source-for-user-role",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleAssignmentId}/governance/{grantId}",
      "name": "Retrieve a user role governance source",
      "entity": "role_assignment",
      "operation": "get_governance_source_for_user_role",
      "description": "Retrieves a governance source for a role assigned to a user.",
      "folder_path": "User Role Assignments",
      "parameters": { "required": ["userId", "roleAssignmentId", "grantId"], "optional": [] },
      "depends_on": ["list-users", "list-user-roles", "list-governance-sources-for-user-role"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment.\n*   **`grantId`** (String, Required): The ID of the grant, obtained from `list-governance-sources-for-user-role`.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nAfter using this endpoint, the planning agent must fetch the full user details (name, email, login) using the `get-user` endpoint with the user ID, as this response contains only technical IDs."
    },
    {
      "id": "list-governance-source-resources-for-user-role",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleAssignmentId}/governance/{grantId}/resources",
      "name": "Retrieve the user role governance source resources",
      "entity": "role_assignment",
      "operation": "list_governance_source_resources_for_user_role",
      "description": "Retrieves the resources of a governance source for a role assigned to a user.",
      "folder_path": "User Role Assignments",
      "parameters": { "required": ["userId", "roleAssignmentId", "grantId"], "optional": [] },
      "depends_on": ["list-users", "list-user-roles", "list-governance-sources-for-user-role"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment.\n*   **`grantId`** (String, Required): The ID of the grant.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nAfter using this endpoint, the planning agent must fetch the full user details (name, email, login) using the `get-user` endpoint with the user ID, as this response contains only technical IDs."
    },
    {
      "id": "list-app-targets-for-user-role",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/catalog/apps",
      "name": "List all admin role app targets",
      "entity": "role_assignment",
      "operation": "list_app_targets_for_user_role",
      "description": "Lists all app targets for an APP_ADMIN role assigned to a user.",
      "folder_path": "User Role Targets",
      "parameters": { "required": ["userId", "roleAssignmentId"], "optional": ["after", "limit"] },
      "depends_on": ["list-users", "list-user-roles"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleAssignmentId`** (String, Required): The ID of the specific `APP_ADMIN` role assignment."
    },
    {
      "id": "list-group-targets-for-user-role",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/groups",
      "name": "List all admin role group targets",
      "entity": "role_assignment",
      "operation": "list_group_targets_for_user_role",
      "description": "Lists all group targets for a role like USER_ADMIN assigned to a user.",
      "folder_path": "User Role Targets",
      "parameters": { "required": ["userId", "roleAssignmentId"], "optional": ["after", "limit"] },
      "depends_on": ["list-users", "list-user-roles"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment.\n\n## Important Notes\n*   This shows which specific groups a `GROUP_MEMBERSHIP_ADMIN` or `USER_ADMIN` is allowed to manage."
    },
    {
      "id": "get-role-targets-by-assignment-type",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/roles/{roleIdOrEncodedRoleId}/targets",
      "name": "Retrieve a role target by assignment type",
      "entity": "role_assignment",
      "operation": "get_role_targets_by_assignment_type",
      "description": "Retrieves all role targets for a role assigned to a user.",
      "folder_path": "User Role Targets",
      "parameters": { "required": ["userId", "roleIdOrEncodedRoleId", "assignmentType"], "optional": ["after", "limit"] },
      "depends_on": ["list-users", "list-custom-roles"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`roleIdOrEncodedRoleId`** (String, Required): The ID or encoded ID of the role."
    },
    {
      "id": "list-group-roles",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/roles",
      "name": "List all group role assignments",
      "entity": "role_assignment",
      "operation": "list_by_group",
      "description": "Lists all roles assigned to a group.",
      "folder_path": "Group Role Assignments",
      "parameters": { "required": ["groupId"], "optional": ["expand"] },
      "depends_on": ["list-groups"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group for which to list roles.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Include role targets in `_embedded` property for group role assignments."
    },
    {
      "id": "get-group-role",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}",
      "name": "Retrieve a group role assignment",
      "entity": "role_assignment",
      "operation": "get_for_group",
      "description": "Retrieves a specific role assigned to a group.",
      "folder_path": "Group Role Assignments",
      "parameters": { "required": ["groupId", "roleAssignmentId"], "optional": [] },
      "depends_on": ["list-groups", "list-group-roles"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment, obtained from `list-group-roles`."
    },
    {
      "id": "list-client-roles",
      "method": "GET",
      "url_pattern": "/oauth2/v1/clients/{clientId}/roles",
      "name": "List all client role assignments",
      "entity": "role_assignment",
      "operation": "list_by_client",
      "description": "Lists all roles assigned to a client app.",
      "folder_path": "Client Role Assignments",
      "parameters": { "required": ["clientId"], "optional": [] },
      "depends_on": ["list-applications"],
      "notes": "## Path Parameters\n*   **`clientId`** (String, Required): The Client ID of the OAuth 2.0 application.\n\n## Important Notes\n*   This is for assigning admin roles to service accounts (client credentials flow)."
    },
    {
      "id": "get-client-role",
      "method": "GET",
      "url_pattern": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}",
      "name": "Retrieve a client role",
      "entity": "role_assignment",
      "operation": "get_for_client",
      "description": "Retrieves a role assignment for a client app.",
      "folder_path": "Client Role Assignments",
      "parameters": { "required": ["clientId", "roleAssignmentId"], "optional": [] },
      "depends_on": ["list-applications", "list-client-roles"],
      "notes": "## Path Parameters\n*   **`clientId`** (String, Required): The Client ID of the OAuth 2.0 application.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment, obtained from `list-client-roles`."
    },
    {
      "id": "list-app-targets-for-group-role",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/catalog/apps",
      "name": "List all group role app targets",
      "entity": "role_assignment",
      "operation": "list_app_targets_for_group_role",
      "description": "Lists all app targets for an APP_ADMIN role assigned to a group.",
      "folder_path": "Group Role Targets",
      "parameters": { "required": ["groupId", "roleAssignmentId"], "optional": ["after", "limit"] },
      "depends_on": ["list-groups", "list-group-roles"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment for the `APP_ADMIN` role."
    },
    {
      "id": "list-group-targets-for-group-role",
      "method": "GET",
      "url_pattern": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/groups",
      "name": "List all group role group targets",
      "entity": "role_assignment",
      "operation": "list_group_targets_for_group_role",
      "description": "Lists all group targets for a role like USER_ADMIN assigned to a group.",
      "folder_path": "Group Role Targets",
      "parameters": { "required": ["groupId", "roleAssignmentId"], "optional": ["after", "limit"] },
      "depends_on": ["list-groups", "list-group-roles"],
      "notes": "## Path Parameters\n*   **`groupId`** (String, Required): The ID of the group.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment."
    },
    {
      "id": "list-app-targets-for-client-role",
      "method": "GET",
      "url_pattern": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/catalog/apps",
      "name": "List all client role app targets",
      "entity": "role_assignment",
      "operation": "list_app_targets_for_client_role",
      "description": "Lists all app targets for an APP_ADMIN role assigned to a client.",
      "folder_path": "Client Role Targets",
      "parameters": { "required": ["clientId", "roleAssignmentId"], "optional": ["after", "limit"] },
      "depends_on": ["list-applications", "list-client-roles"],
      "notes": "## Path Parameters\n*   **`clientId`** (String, Required): The Client ID of the application.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment."
    },
    {
      "id": "list-group-targets-for-client-role",
      "method": "GET",
      "url_pattern": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/groups",
      "name": "List all client role group targets",
      "entity": "role_assignment",
      "operation": "list_group_targets_for_client_role",
      "description": "Lists all group targets for a role assigned to a client.",
      "folder_path": "Client Role Targets",
      "parameters": { "required": ["clientId", "roleAssignmentId"], "optional": ["after", "limit"] },
      "depends_on": ["list-applications", "list-client-roles"],
      "notes": "## Path Parameters\n*   **`clientId`** (String, Required): The Client ID of the application.\n*   **`roleAssignmentId`** (String, Required): The ID of the role assignment."
    },
    {
      "id": "list-resource-sets",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets",
      "name": "List all resource sets",
      "entity": "resource_set",
      "operation": "list",
      "description": "Lists all resource sets.",
      "folder_path": "Resource Sets",
      "parameters": { "required": [], "optional": ["after"] },
      "depends_on": ["list-resource-set-resources", "list-resource-set-bindings"],
      "notes": "## Important Notes\n*   Resource sets are collections of resources (like groups or apps) to which a custom admin role can be constrained."
    },
    {
      "id": "get-resource-set",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}",
      "name": "Retrieve a resource set",
      "entity": "resource_set",
      "operation": "get",
      "description": "Retrieves a resource set by its ID or label.",
      "folder_path": "Resource Sets",
      "parameters": { "required": ["resourceSetIdOrLabel"], "optional": [] },
      "depends_on": ["list-resource-sets"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set."
    },
    {
      "id": "list-resource-set-resources",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/resources",
      "name": "List all resource set resources",
      "entity": "resource_set",
      "operation": "list_resources",
      "description": "Lists all resources (e.g., groups or apps) within a resource set.",
      "folder_path": "Resource Set Resources",
      "parameters": { "required": ["resourceSetIdOrLabel"], "optional": [] },
      "depends_on": ["list-resource-sets"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns a list of resource IDs (e.g., for apps or groups). To get human-readable details like names and descriptions, the planning agent must perform follow-up queries to the specific endpoints for those resources (e.g., `get-application` or `get-group`)."
    },
    {
      "id": "get-resource-set-resource",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/resources/{resourceId}",
      "name": "Retrieve a resource set resource",
      "entity": "resource_set",
      "operation": "get_resource",
      "description": "Retrieves a specific resource from a resource set.",
      "folder_path": "Resource Set Resources",
      "parameters": { "required": ["resourceSetIdOrLabel", "resourceId"], "optional": [] },
      "depends_on": ["list-resource-sets", "list-resource-set-resources"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set.\n*   **`resourceId`** (String, Required): The ID of the resource within the set.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns a resource with only a basic ID. To get full details, the planning agent must perform a follow-up query to the specific endpoint for that resource type (e.g., `get-application` or `get-group`)."
    },
    {
      "id": "list-resource-set-bindings",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings",
      "name": "List all role resource set bindings",
      "entity": "resource_set",
      "operation": "list_bindings",
      "description": "Lists all role bindings for a resource set.",
      "folder_path": "Role Resource Set Bindings",
      "parameters": { "required": ["resourceSetIdOrLabel"], "optional": ["after"] },
      "depends_on": ["list-resource-sets", "list-resource-set-binding-members"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set.\n\n## Important Notes\n*   A 'binding' connects a custom role to a resource set.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns bindings with role and member IDs. The planning agent must perform follow-up queries to fetch human-readable details for the roles (`get-custom-role`) and members (`get-user` or `get-group`)."
    },
    {
      "id": "get-resource-set-binding",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}",
      "name": "Retrieve a role resource set binding",
      "entity": "resource_set",
      "operation": "get_binding",
      "description": "Retrieves the binding of a role for a resource set.",
      "folder_path": "Role Resource Set Bindings",
      "parameters": { "required": ["resourceSetIdOrLabel", "roleIdOrLabel"], "optional": [] },
      "depends_on": ["list-resource-sets", "list-custom-roles"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set.\n*   **`roleIdOrLabel`** (String, Required): The ID or label of the custom role.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns a binding with a role ID. The planning agent must perform a follow-up query to `get-custom-role` to get the full role details. To find the members of this binding, use the `list-resource-set-binding-members` endpoint."
    },
    {
      "id": "list-resource-set-binding-members",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members",
      "name": "List all role resource set binding members",
      "entity": "resource_set",
      "operation": "list_binding_members",
      "description": "Lists all members (users or groups) assigned a role over a resource set.",
      "folder_path": "Role Resource Set Binding Members",
      "parameters": { "required": ["resourceSetIdOrLabel", "roleIdOrLabel"], "optional": ["after"] },
      "depends_on": ["list-resource-sets", "list-custom-roles"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set.\n*   **`roleIdOrLabel`** (String, Required): The ID or label of the custom role.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns a list of member IDs (users or groups). For human-readable details, the planning agent must perform follow-up queries to `get-user` or `get-group` for each member."
    },
    {
      "id": "get-resource-set-binding-member",
      "method": "GET",
      "url_pattern": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members/{memberId}",
      "name": "Retrieve a role resource set binding member",
      "entity": "resource_set",
      "operation": "get_binding_member",
      "description": "Retrieves a specific member of a role resource set binding.",
      "folder_path": "Role Resource Set Binding Members",
      "parameters": { "required": ["resourceSetIdOrLabel", "roleIdOrLabel", "memberId"], "optional": [] },
      "depends_on": ["list-resource-sets", "list-custom-roles", "list-resource-set-binding-members"],
      "notes": "## Path Parameters\n*   **`resourceSetIdOrLabel`** (String, Required): The ID or label of the resource set.\n*   **`roleIdOrLabel`** (String, Required): The ID or label of the custom role.\n*   **`memberId`** (String, Required): The ID of the member (user or group).\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns a single member ID. For human-readable details, the planning agent must perform a follow-up query to `get-user` or `get-group` with this ID."
    },
    {
      "id": "list-custom-roles",
      "method": "GET",
      "url_pattern": "/api/v1/iam/roles",
      "name": "List all custom roles",
      "entity": "custom_role",
      "operation": "list",
      "description": "Lists all custom admin roles.",
      "folder_path": "Custom Roles",
      "parameters": { "required": [], "optional": ["after"] },
      "depends_on": ["list-custom-role-permissions"],
      "notes": "## Important Notes\n*   This lists the custom roles you have created, not the standard, built-in Okta admin roles."
    },
    {
      "id": "get-custom-role",
      "method": "GET",
      "url_pattern": "/api/v1/iam/roles/{roleIdOrLabel}",
      "name": "Retrieve a role",
      "entity": "custom_role",
      "operation": "get",
      "description": "Retrieves a custom role by its ID or label.",
      "folder_path": "Custom Roles",
      "parameters": { "required": ["roleIdOrLabel"], "optional": [] },
      "depends_on": ["list-custom-roles"],
      "notes": "## Path Parameters\n*   **`roleIdOrLabel`** (String, Required): The ID or label of the custom role."
    },
    {
      "id": "list-custom-role-permissions",
      "method": "GET",
      "url_pattern": "/api/v1/iam/roles/{roleIdOrLabel}/permissions",
      "name": "List all custom role permissions",
      "entity": "custom_role",
      "operation": "list_permissions",
      "description": "Lists all permissions associated with a custom role.",
      "folder_path": "Custom Role Permissions",
      "parameters": { "required": ["roleIdOrLabel"], "optional": [] },
      "depends_on": ["list-custom-roles"],
      "notes": "## Path Parameters\n*   **`roleIdOrLabel`** (String, Required): The ID or label of the custom role."
    },
    {
      "id": "get-custom-role-permission",
      "method": "GET",
      "url_pattern": "/api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
      "name": "Retrieve a custom role permission",
      "entity": "custom_role",
      "operation": "get_permission",
      "description": "Retrieves a specific permission for a custom role.",
      "folder_path": "Custom Role Permissions",
      "parameters": { "required": ["roleIdOrLabel", "permissionType"], "optional": [] },
      "depends_on": ["list-custom-roles"],
      "notes": "## Path Parameters\n*   **`roleIdOrLabel`** (String, Required): The ID or label of the custom role.\n*   **`permissionType`** (String, Required): The specific permission string, e.g., `okta.users.read`."
    },
    {
      "id": "list-system-log-events",
      "method": "GET",
      "url_pattern": "/api/v1/logs",
      "name": "List all System Log events",
      "entity": "system_log",
      "operation": "list_events",
      "description": "Retrieves a list of system log events from your organization.",
      "folder_path": "System Log",
      "parameters": { "required": [], "optional": ["since", "until", "after", "filter", "q", "sortOrder", "limit"] },
      "depends_on": [],
      "notes": "## Query Parameters\n*   **`since`** (String, Optional): Start time in ISO 8601 format. Example: `since=2024-01-01T00:00:00.000Z`. Strongly recommended for bounded queries.\n*   **`until`** (String, Optional): End time in ISO 8601 format. Example: `until=2024-01-31T23:59:59.999Z`. Use with `since` for time ranges.\n*   **`filter`** (String, Optional): SCIM filter expression for structured event filtering. Example: `eventType eq \"user.authentication.auth\" and outcome.result eq \"SUCCESS\"`.\n*   **`q`** (String, Optional): Free text search across event data. Searches event descriptions, usernames, IP addresses.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n*   **`limit`** (Integer, Optional): Number of results per page (default: 100, max: 1000).\n*   **`sortOrder`** (String, Optional): Sort order `ASCENDING` or `DESCENDING` (default: `DESCENDING`).\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `since` and `until` parameters for efficient queries - unbounded queries may timeout or return incomplete results.\n*   Use `filter` for structured queries with event types, outcomes, actors: `eventType eq \"user.authentication.auth\"`, `outcome.result eq \"SUCCESS\"`, `actor.id eq \"userId\"`.\n*   Use `q` for free-text search across event details, usernames, IP addresses.\n*   All filter expressions must be URL encoded.\n*   Maximum time range: 180 days.\n\n## Common Event Types\n*   **Authentication**: `user.authentication.auth`, `user.authentication.sso`, `user.session.start`\n*   **User Lifecycle**: `user.lifecycle.create`, `user.lifecycle.activate`, `user.lifecycle.deactivate`\n*   **Application Access**: `application.user_membership.add`, `application.user_membership.remove`\n\n## Example Queries\n*   Recent logins: `since=2024-01-01T00:00:00.000Z&filter=eventType eq \"user.authentication.auth\"`\n*   Failed authentications: `filter=eventType eq \"user.authentication.auth\" and outcome.result eq \"FAILURE\"`"
    },
    {
      "id": "list-users",
      "method": "GET",
      "url_pattern": "/api/v1/users",
      "name": "List all users",
      "entity": "user",
      "operation": "list",
      "description": "Lists users in your organization.",
      "folder_path": "Users",
      "parameters": { "required": [], "optional": ["search", "filter", "q", "after", "limit", "sortBy", "sortOrder", "expand"] },
      "depends_on": ["list-user-authenticator-enrollments", "list-user-app-links", "list-user-roles"],
      "notes": "## Query Parameters\n*   **`search`** (String, Optional): Most powerful method using SCIM expressions for optimal search performance. Searches profile attributes (prefix with `profile.`), status, created, activated, etc. Example: `profile.lastName eq \"Smith\" and status eq \"ACTIVE\"`.\n*   **`filter`** (String, Optional): SCIM expressions for limited properties: status, lastUpdated, id, profile.login, profile.email, profile.firstName, profile.lastName. Example: `status eq \"LOCKED_OUT\"`.\n*   **`q`** (String, Optional): Simple search matching firstName, lastName, or email (startsWith match). Note: Omits DEPROVISIONED users.\n*   **`expand`** (String, Optional): Use `expand=classification` to include user classification metadata in `_embedded` property.\n*   **`limit`** (Integer, Optional): Number of results returned (default: 10 for q parameter, 200 max).\n*   **`sortBy`** (String, Optional): Field to sort by (search queries only). Example: `sortBy=profile.lastName`.\n*   **`sortOrder`** (String, Optional): Sort direction: `asc` or `desc` (search queries only).\n*   **`after`** (String, Optional): Pagination cursor for next page.\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `search` for advanced SCIM filtering (profile attributes, status, dates), use `filter` for limited system properties, use `q` for simple name/email matching - mixing search and filter parameters causes errors.\n*   The `q` parameter automatically excludes DEPROVISIONED users; use search/filter for complete results.\n*   Search parameter supports all profile attributes including custom fields, filter parameter has limited field support.\n*   Search queries can be sorted with sortBy/sortOrder, filter/q queries use default sorting.\n*   All SCIM expressions must be URL encoded.\n\n## Search Parameter Details\n*   **Case Sensitivity**: Property names are case sensitive, operators and string values are case insensitive.\n*   **Supported Properties**: Any user profile attribute (custom attributes included), top-level properties (id, status, created, activated, statusChanged, lastUpdated), user type (type.id), classification.type (Early Access).\n*   **Operators**: eq (equals), sw (starts with), co (contains - limited to profile.firstName, profile.lastName, profile.email, profile.login), gt (greater than), lt (less than).\n*   **Array Properties**: Searches return entire object if any array element matches the search term. Follows SCIM Protocol Specification for array searching.\n*   **Logical Operators**: Use 'and', 'or' for combining conditions. Use parentheses for grouping.\n*   **Sorting**: Use `sortBy` and `sortOrder` parameters with search queries.\n*   **Not Equal Alternative**: The ne (not equal) operator is not supported; use `lt ... or ... gt` combinations instead. Example: to exclude STAGED users use `(status lt \"STAGED\" or status gt \"STAGED\")`.\n\n## Search Examples\n*   **Status Filter**: `search=status eq \"STAGED\"`\n*   **Time-based**: `search=lastUpdated gt \"2014-01-01T00:00:00.000Z\"`\n*   **Specific ID**: `search=id eq \"00u1ero7vZFVEIYLWPBN\"`\n*   **Complex Query**: `search=profile.department eq \"Engineering\" and (created lt \"2014-01-01T00:00:00.000Z\" or status eq \"ACTIVE\")`\n*   **Custom Attribute**: `search=profile.employeeNumber eq \"12345\"`\n*   **Array Property (Custom Attributes)**: `search=profile.arrayAttr eq \"arrayAttrVal1\"` - if user has custom attribute \"arrayAttr\" containing [\"arrayAttrVal1\", \"arrayAttrVal2\"], this user is returned\n*   **Multiple Array Values**: `search=profile.certifications eq \"AWS\" or profile.certifications eq \"Azure\"` - matches users with either certification\n*   **Classification**: `search=classification.type eq \"LITE\"` (supported values: STANDARD, LITE)\n*   **Exclude Status**: `search=(status lt \"STAGED\" or status gt \"STAGED\")` - finds all users except STAGED\n\n## Filter Parameter Examples\n*   **Co Operator**: Only use `co` with profile.firstName, profile.lastName, profile.email, and profile.login\n*   **Supported Operators**: sw (starts with), eq (equals), co (contains - limited attributes only)\n\n## Important Notes\n*   To find users in a `DEPROVISIONED` state, you must explicitly use filter/search: `filter=status eq \"DEPROVISIONED\"`.\n*   For MFA status analysis, use `list-user-authenticator-enrollments` to check enrollment details.\n*   Complex or overly long search queries may result in errors.\n*   Returned users include DEPROVISIONED status when using search parameter.\n*   Use ID lookup for updated records to ensure latest data.\n*   The ne (not equal) operator is not supported; use lt/gt combinations instead.\n*   You can search multiple arrays, multiple values in an array, and use standard logical and filtering operators."
    },
    {
      "id": "get-user",
      "method": "GET",
      "url_pattern": "/api/v1/users/{id}",
      "name": "Retrieve a user",
      "entity": "user",
      "operation": "get",
      "description": "Retrieves a user by their ID or login.",
      "folder_path": "Users",
      "parameters": { "required": ["id"], "optional": ["expand"] },
      "depends_on": ["list-users", "list-user-app-links", "list-user-groups", "list-user-roles"],
      "notes": "## Path Parameters\n*   **`id`** (String, Required): The user's unique ID (e.g., `00u1a2b3...`), their login (e.g., `john.doe@example.com`), or the special value `me`.\n\n## Query Parameters\n*   **`expand`** (String, Optional): Include metadata in `_embedded` property. Valid values: `blocks` (user access blocks) or `classification` (user classification metadata).\n\n## Important Notes\n*   Using the unique user ID is the most reliable method for retrieval.\n*   The special value `me` retrieves the profile of the user associated with the API token being used.\n*   For comprehensive access analysis, also check `list-user-app-links`, `list-user-groups`, and `list-user-roles`."
    },
    {
      "id": "list-user-blocks",
      "method": "GET",
      "url_pattern": "/api/v1/users/{id}/blocks",
      "name": "List all user blocks",
      "entity": "user",
      "operation": "list_blocks",
      "description": "Lists information about how a user is blocked from accessing their account.",
      "folder_path": "Users",
      "parameters": { "required": ["id"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`id`** (String, Required): The ID or login of the user."
    },
    {
      "id": "list-user-authenticator-enrollments",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/authenticator-enrollments",
      "name": "List all authenticator enrollments",
      "entity": "user_authenticator",
      "operation": "list_enrollments",
      "description": "Lists all authenticator enrollments of the specified user.",
      "folder_path": "User Authenticator Enrollments",
      "parameters": { "required": ["userId"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n\n## Important Notes\n* USET list_factors  This is the modern, recommended endpoint for listing a user's enrolled authenticators and provides more detail than the legacy Factors API (`list-user-factors`)."
    },
    {
      "id": "get-authenticator-enrollment",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/authenticator-enrollments/{enrollmentId}",
      "name": "Retrieve an authenticator enrollment",
      "entity": "user_authenticator",
      "operation": "get_enrollment",
      "description": "Retrieves a user's authenticator enrollment by its ID.",
      "folder_path": "User Authenticator Enrollments",
      "parameters": { "required": ["userId", "enrollmentId"], "optional": [] },
      "depends_on": ["list-users", "list-user-authenticator-enrollments"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`enrollmentId`** (String, Required): The ID of the enrollment, obtained from `list-user-authenticator-enrollments`."
    },
    {
      "id": "list-yubikey-tokens",
      "method": "GET",
      "url_pattern": "/api/v1/org/factors/yubikey_token/tokens",
      "name": "List all YubiKey OTP tokens",
      "entity": "user_authenticator",
      "operation": "list_yubikey_tokens",
      "description": "Lists all YubiKey OTP tokens registered in the organization.",
      "folder_path": "User Factors",
      "parameters": { "required": [], "optional": ["after", "expand", "filter", "forDownload", "limit", "sortBy", "sortOrder"] },
      "depends_on": [],
      "notes": "## Query Parameters\n*   **`filter`** (String, Optional): SCIM filter expression for token attributes. Filterable fields: `profile.email`, `profile.serial`, `status`, `user.id`, `created`, `activated`, `lastVerified`.\n*   **`after`** (String, Optional): Pagination cursor for next page of results.\n*   **`expand`** (String, Optional): Use `expand=user` to include user details for associated tokens.\n*   **`forDownload`** (Boolean, Optional): Format response for CSV download when true.\n*   **`limit`** (Integer, Optional): Number of results per page.\n*   **`sortBy`** (String, Optional): Sort field. Values: `id`, `status`, `created`, `activated`, `lastVerified`.\n*   **`sortOrder`** (String, Optional): Sort direction `asc` or `desc`.\n\n## Parameter Usage Notes\n*   **CRITICAL**: Use `filter` for token-specific filtering with SCIM expressions on profile, status, and user attributes.\n*   Filter expressions must be URL encoded.\n*   Use `expand=user` to include user details instead of just user IDs.\n*   Common filters: `status eq \"ACTIVE\"`, `user.id eq \"userId\"`, `profile.email eq \"user@company.com\"`.\n\n## Example Filters\n*   Active tokens: `filter=status eq \"ACTIVE\"`\n*   User's tokens: `filter=user.id eq \"userId\"`\n*   By email: `filter=profile.email eq \"user@company.com\"`\n*   By serial: `filter=profile.serial eq \"12345\"`\n\n## Important Notes\n*   This endpoint lists the hardware tokens themselves, not user enrollments.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThe response for this endpoint contains user IDs associated with each YubiKey token. For human-readable user details like name, email, and login, the planning agent must perform a follow-up query to the `get-user` endpoint for each user ID."
    },
    {
      "id": "get-yubikey-token",
      "method": "GET",
      "url_pattern": "/api/v1/org/factors/yubikey_token/tokens/{tokenId}",
      "name": "Retrieve a YubiKey OTP token",
      "entity": "user_authenticator",
      "operation": "get_yubikey_token",
      "description": "Retrieves the specified YubiKey OTP token by its ID.",
      "folder_path": "User Factors",
      "parameters": { "required": ["tokenId"], "optional": [] },
      "depends_on": ["list-yubikey-tokens"],
      "notes": "## Path Parameters\n*   **`tokenId`** (String, Required): The ID of the YubiKey token, obtained from `list-yubikey-tokens`.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThe response for this endpoint contains a user ID. For human-readable user details like name, email, and login, the planning agent must perform a follow-up query to the `get-user` endpoint using this ID."
    },
    {
      "id": "list-user-factors",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/factors",
      "name": "List all enrolled factors",
      "entity": "user_authenticator",
      "operation": "list_factors",
      "description": "Lists all MFA factors enrolled by the specified user.",
      "folder_path": "User Factors",
      "parameters": { "required": ["userId"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n\n## Important Notes\n*   This is the primary endpoint to see which MFA factors a user has set up.\n*   **Note**: This is a legacy endpoint. For new development, it is recommended to use the `list-user-authenticator-enrollments` endpoint, which provides a more detailed representation of a user's authenticators."
    },
    {
      "id": "list-supported-factors",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/factors/catalog",
      "name": "List all supported factors",
      "entity": "user_authenticator",
      "operation": "list_supported_factors",
      "description": "Lists all the supported factors that can be enrolled by the specified user.",
      "folder_path": "User Factors",
      "parameters": { "required": ["userId"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n\n## Important Notes\n*   Use this to determine which MFA options are available for a user to enroll in, based on policy."
    },
    {
      "id": "list-supported-security-questions",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/factors/questions",
      "name": "List all supported security questions",
      "entity": "user_authenticator",
      "operation": "list_supported_security_questions",
      "description": "Lists all available security questions for the specified user.",
      "folder_path": "User Factors",
      "parameters": { "required": ["userId"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user."
    },
    {
      "id": "get-user-factor",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/factors/{factorId}",
      "name": "Retrieve a factor",
      "entity": "user_authenticator",
      "operation": "get_factor",
      "description": "Retrieves an enrolled factor for the specified user.",
      "folder_path": "User Factors",
      "parameters": { "required": ["userId", "factorId"], "optional": [] },
      "depends_on": ["list-users", "list-user-factors"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`factorId`** (String, Required): The ID of the factor, obtained from `list-user-factors`."
    },
    {
      "id": "get-factor-transaction-status",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}",
      "name": "Retrieve a factor transaction status",
      "entity": "user_authenticator",
      "operation": "get_factor_transaction_status",
      "description": "Retrieves the status of a push factor verification transaction.",
      "folder_path": "User Factors",
      "parameters": { "required": ["userId", "factorId", "transactionId"], "optional": [] },
      "depends_on": ["list-users", "list-user-factors"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n*   **`factorId`** (String, Required): The ID of the push-capable factor.\n*   **`transactionId`** (String, Required): The ID of the transaction, obtained by initiating a push verification (a POST action)."
    },
    {
      "id": "list-user-app-links",
      "method": "GET",
      "url_pattern": "/api/v1/users/{id}/appLinks",
      "name": "List all assigned app links",
      "entity": "user",
      "operation": "list_app_links",
      "description": "Lists all application links for a user.",
      "folder_path": "User Resources",
      "parameters": { "required": ["id"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`id`** (String, Required): The ID of the user.\n\n## Important Notes\n*   This returns the applications a user would see on their Okta dashboard."
    },
    {
      "id": "list-user-groups",
      "method": "GET",
      "url_pattern": "/api/v1/users/{id}/groups",
      "name": "List all groups",
      "entity": "user",
      "operation": "list_groups",
      "description": "Lists all groups of which the user is a member.",
      "folder_path": "User Resources",
      "parameters": { "required": ["id"], "optional": [] },
      "depends_on": ["list-users", "list-user-app-links", "list-user-roles"],
      "notes": "## Path Parameters\n*   **`id`** (String, Required): The ID of the user.\n\n## Important Notes\n*   Groups provide access to applications through group assignments.\n*   For complete access analysis, also check `list-user-app-links` and `list-user-roles`."
    },
    {
      "id": "list-user-clients",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/clients",
      "name": "List all clients",
      "entity": "user",
      "operation": "list_clients",
      "description": "Lists all OAuth 2.0 clients for which the user has grants or tokens.",
      "folder_path": "User Resources",
      "parameters": { "required": ["userId"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user.\n\n## PLANNING AGENT NOTICE: REQUIRES_ADDITIONAL_ENTITY_DETAILS\nThis endpoint returns a list of OAuth clients associated with a user, but not the user's details. The planning agent should fetch the user's details using the `get-user` endpoint if human-readable context is needed."
    },
    {
      "id": "list-user-devices",
      "method": "GET",
      "url_pattern": "/api/v1/users/{userId}/devices",
      "name": "List all devices",
      "entity": "user",
      "operation": "list_devices",
      "description": "Lists all devices enrolled by a user.",
      "folder_path": "User Resources",
      "parameters": { "required": ["userId"], "optional": [] },
      "depends_on": ["list-users"],
      "notes": "## Path Parameters\n*   **`userId`** (String, Required): The ID of the user."
    }
  ]
}